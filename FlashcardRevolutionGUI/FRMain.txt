/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package flashcardrevolution;
import java.util.*;
import java.io.*;
import javax.swing.*;
     

/**
 *
 * @authors Jack Lindsey and Vince Cozza
 */
public class FRMain extends javax.swing.JFrame {
    
    /**
	 * The main class of {@link flashcardrevolution}
	 * @author Vince Cozza (aka Deager4) and Jack Lindsey
	 * @param args
	 * @throws IOException
	 */
    
    public static ArrayList<FRFlashcard> cards = new ArrayList<FRFlashcard>(); //list of all flashcards
    public static String savePoint;  //stores save point location
    public static String importPoint;  //stores import point location
    public static double totalWrong; //I cannot remember for the life of me why the hell this is here
    public static int count = -1; //used during quizzes but needs to be declared outside them
    public static ArrayList<FRFlashcard> cardsWithTags = new ArrayList<FRFlashcard>();
    public static FRFlashcard frf;
    /**
	 * Writes all of the {@link FRFlashcard} objects contained within {@link FRMain#cards} to a text file
	 * @author Vince Cozza (aka Deager4) and Jack Lindsey
	 * 
	 * @throws IOException
	 */
    private static void save() throws IOException
    {
            try {
                    FileWriter save = new FileWriter(savePoint);
                    PrintWriter output = new PrintWriter(save);
                    for(FRFlashcard frf : cards)
                    {
                            output.println(frf.getQuestion());
                            output.println(frf.getAnswer());

                            int count = frf.getTags().size();
                            for(int con = 0; con < count; con++)
                            {
                                    
                                    output.print(frf.getTags().get(con) + ",");
                            }
                            output.println("");
                            output.println(frf.getTimesAsked());
                            output.println(frf.getTimesWrong());
                    }
                    output.println("#####end#####");
                    output.close();
                    save.close();
            }
            catch(IOException e)
            {
                    e.printStackTrace();
            }

    }
/**
	 * Reads a text file and parses the contents as {@link FRFlashcard}s, and adds them to {@link FRMain#cards}
	 * @author Vince Cozza (aka Deager4) and Jack Lindsey
	 * 
	 * @throws NumberFormatException
	 */
    public static void importer() throws NumberFormatException 
    {
        String question = "";
        String answer = "";
        String tags = "";
        String timesAsked = "";
        String timesWrong = "";
        try
        {
            FileReader input = new FileReader(importPoint);
            Scanner bufRead = new Scanner(input);

            while (true)
            {
                question = bufRead.nextLine();

                if (question.equals("#####end#####"))
                {

                        break;
                }
                answer = bufRead.nextLine();
                tags = bufRead.nextLine();
                timesAsked = bufRead.nextLine();
                timesWrong = bufRead.nextLine();
                FRFlashcard ne = new FRFlashcard(question, answer, tags);
                ne.setTimesAsked(Integer.parseInt(timesAsked));
                ne.setTimesWrong(Integer.parseInt(timesWrong));
                cards.add(ne);
            }


    }





        catch(ArrayIndexOutOfBoundsException e)
        {
                e.printStackTrace();
        }
        catch(IOException e)
        {
                e.printStackTrace();
        }
    }

    /**
     * Creates new form FRMain
     */
    public FRMain() {
        initComponents(); //basically starts the program and creates all GUI panels
        
            
        menuScreen.setVisible(false);
        quizTagsSelectScreen.setVisible(false);
        quizScreen.setVisible(false);
        editScreen.setVisible(false);
        statsScreen.setVisible(false);
        loadFileChooser.setVisible(false);
        saveFileChooser.setVisible(false);
        deleteScreen.setVisible(false);
        saveFileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES); //can pick a directory to save in and then create file
        loadFileChooser.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY); //can load from file only
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.  This code creates / formats everything.  
     * Trust me - you don't want to read it.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        fileChooserFrame = new javax.swing.JFrame();
        saveFileChooser = new javax.swing.JFileChooser();
        loadFileChooser = new javax.swing.JFileChooser();
        saveLoadScreen = new javax.swing.JPanel();
        savePrompt = new javax.swing.JLabel();
        loadPrompt = new javax.swing.JLabel();
        saveLoadToMenu = new javax.swing.JButton();
        userSavePoint = new javax.swing.JTextField();
        userLoadPoint = new javax.swing.JTextField();
        broweSave = new javax.swing.JButton();
        browseLoad = new javax.swing.JButton();
        saveLoadTitle = new javax.swing.JLabel();
        menuScreen = new javax.swing.JPanel();
        menuTitle = new javax.swing.JLabel();
        editButton = new javax.swing.JButton();
        quizButton = new javax.swing.JButton();
        statsButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        quizTagsSelectScreen = new javax.swing.JPanel();
        quizTagsSelectPrompt = new javax.swing.JLabel();
        userQuizTagsSelect = new javax.swing.JTextField();
        quizTagsSelectToQuiz = new javax.swing.JButton();
        quizTagsSelectToMenu = new javax.swing.JButton();
        noteKeywordAll = new javax.swing.JLabel();
        tagsSelectTitle = new javax.swing.JLabel();
        quizScreen = new javax.swing.JPanel();
        quizQuestion = new javax.swing.JLabel();
        userQuizAnswer = new javax.swing.JTextField();
        toNextQuizQuestion = new javax.swing.JButton();
        quizScreenToMenu = new javax.swing.JButton();
        quizResults = new javax.swing.JLabel();
        quizTitle = new javax.swing.JLabel();
        editScreen = new javax.swing.JPanel();
        questionPrompt = new javax.swing.JLabel();
        answerPrompt = new javax.swing.JLabel();
        tagsPrompt = new javax.swing.JLabel();
        userQuestionEntry = new javax.swing.JTextField();
        userAnswerEntry = new javax.swing.JTextField();
        userTagsEntry = new javax.swing.JTextField();
        nextEditScreen = new javax.swing.JButton();
        editScreenToMenu = new javax.swing.JButton();
        editTitle = new javax.swing.JLabel();
        editError = new javax.swing.JLabel();
        statsScreen = new javax.swing.JPanel();
        statsScreenToMenu = new javax.swing.JButton();
        statsTitle = new javax.swing.JLabel();
        clearStatsButton = new javax.swing.JButton();
        statsDisplayScroll = new javax.swing.JScrollPane();
        statsDisplay = new javax.swing.JLabel();
        deleteScreen = new javax.swing.JPanel();
        deletePrompt = new javax.swing.JLabel();
        toNextDelete = new javax.swing.JButton();
        deleteScreenToMenu = new javax.swing.JButton();
        deleteTitle = new javax.swing.JLabel();
        allPotentialDeletesScroll = new javax.swing.JScrollPane();
        allPotentialDeletes = new javax.swing.JLabel();
        userDeleteInput = new javax.swing.JTextField();

        saveFileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        saveFileChooser.setApproveButtonText("Enter");
        saveFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileChooserActionPerformed(evt);
            }
        });

        loadFileChooser.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        loadFileChooser.setApproveButtonText("Enter");
        loadFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileChooserFrameLayout = new javax.swing.GroupLayout(fileChooserFrame.getContentPane());
        fileChooserFrame.getContentPane().setLayout(fileChooserFrameLayout);
        fileChooserFrameLayout.setHorizontalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 792, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(saveFileChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE))
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addComponent(loadFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                    .addGap(10, 10, 10)))
        );
        fileChooserFrameLayout.setVerticalGroup(
            fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(saveFileChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE))
            .addGroup(fileChooserFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserFrameLayout.createSequentialGroup()
                    .addComponent(loadFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGap(11, 11, 11)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flashcard Revolution");

        savePrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        savePrompt.setText("Please enter a save point.");

        loadPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loadPrompt.setText("Please enter a load point.");

        saveLoadToMenu.setText("Continue>>");
        saveLoadToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveLoadToMenuActionPerformed(evt);
            }
        });

        userSavePoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userSavePointActionPerformed(evt);
            }
        });

        broweSave.setText("Browse");
        broweSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                broweSaveActionPerformed(evt);
            }
        });

        browseLoad.setText("Browse");
        browseLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseLoadActionPerformed(evt);
            }
        });

        saveLoadTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        saveLoadTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        saveLoadTitle.setText("Save/Load");
        saveLoadTitle.setToolTipText("");

        javax.swing.GroupLayout saveLoadScreenLayout = new javax.swing.GroupLayout(saveLoadScreen);
        saveLoadScreen.setLayout(saveLoadScreenLayout);
        saveLoadScreenLayout.setHorizontalGroup(
            saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveLoadScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(userLoadPoint, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(savePrompt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadPrompt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userSavePoint, javax.swing.GroupLayout.Alignment.LEADING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE)
                .addGroup(saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(broweSave, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(browseLoad, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(40, 40, 40))
            .addComponent(saveLoadTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(saveLoadScreenLayout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(saveLoadToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        saveLoadScreenLayout.setVerticalGroup(
            saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveLoadScreenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(saveLoadTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savePrompt)
                .addGap(33, 33, 33)
                .addGroup(saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(broweSave)
                    .addComponent(userSavePoint, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(loadPrompt)
                .addGap(38, 38, 38)
                .addGroup(saveLoadScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLoadPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(saveLoadToMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        menuTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        menuTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuTitle.setText("Menu");

        editButton.setText("Add a Flashcard");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        quizButton.setText("Quiz Yourself");
        quizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizButtonActionPerformed(evt);
            }
        });

        statsButton.setText("See Stats");
        statsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete a Card");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuScreenLayout = new javax.swing.GroupLayout(menuScreen);
        menuScreen.setLayout(menuScreenLayout);
        menuScreenLayout.setHorizontalGroup(
            menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuScreenLayout.createSequentialGroup()
                .addGroup(menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(menuScreenLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(quizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
            .addComponent(menuTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menuScreenLayout.setVerticalGroup(
            menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuTitle)
                .addGap(37, 37, 37)
                .addGroup(menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(menuScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        quizTagsSelectPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quizTagsSelectPrompt.setText("Please enter the tags, separated by commas, that you would like to quiz yourself on. ");

        userQuizTagsSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userQuizTagsSelectActionPerformed(evt);
            }
        });

        quizTagsSelectToQuiz.setText("Begin Quiz");
        quizTagsSelectToQuiz.setToolTipText("");
        quizTagsSelectToQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizTagsSelectToQuizActionPerformed(evt);
            }
        });

        quizTagsSelectToMenu.setText("Menu");
        quizTagsSelectToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizTagsSelectToMenuActionPerformed(evt);
            }
        });

        noteKeywordAll.setText("Note: Enter \"all\" to quiz yourself on all your flashcards.");

        tagsSelectTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        tagsSelectTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tagsSelectTitle.setText("Tags Select");

        javax.swing.GroupLayout quizTagsSelectScreenLayout = new javax.swing.GroupLayout(quizTagsSelectScreen);
        quizTagsSelectScreen.setLayout(quizTagsSelectScreenLayout);
        quizTagsSelectScreenLayout.setHorizontalGroup(
            quizTagsSelectScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizTagsSelectScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quizTagsSelectScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quizTagsSelectScreenLayout.createSequentialGroup()
                        .addComponent(quizTagsSelectToMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quizTagsSelectToQuiz))
                    .addGroup(quizTagsSelectScreenLayout.createSequentialGroup()
                        .addGroup(quizTagsSelectScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noteKeywordAll, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userQuizTagsSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quizTagsSelectPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(tagsSelectTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        quizTagsSelectScreenLayout.setVerticalGroup(
            quizTagsSelectScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizTagsSelectScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tagsSelectTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quizTagsSelectPrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userQuizTagsSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(noteKeywordAll, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addGroup(quizTagsSelectScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quizTagsSelectToMenu)
                    .addComponent(quizTagsSelectToQuiz))
                .addGap(19, 19, 19))
        );

        quizQuestion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        userQuizAnswer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userQuizAnswerActionPerformed(evt);
            }
        });

        toNextQuizQuestion.setText("Next");
        toNextQuizQuestion.setToolTipText("");
        toNextQuizQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toNextQuizQuestionActionPerformed(evt);
            }
        });

        quizScreenToMenu.setText("Menu");
        quizScreenToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizScreenToMenuActionPerformed(evt);
            }
        });

        quizResults.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        quizTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        quizTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quizTitle.setText("Quiz");

        javax.swing.GroupLayout quizScreenLayout = new javax.swing.GroupLayout(quizScreen);
        quizScreen.setLayout(quizScreenLayout);
        quizScreenLayout.setHorizontalGroup(
            quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quizScreenLayout.createSequentialGroup()
                        .addComponent(quizScreenToMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toNextQuizQuestion))
                    .addGroup(quizScreenLayout.createSequentialGroup()
                        .addGroup(quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(userQuizAnswer, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                                .addComponent(quizQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(quizResults, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 111, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(quizTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        quizScreenLayout.setVerticalGroup(
            quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quizScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(quizTitle)
                .addGap(31, 31, 31)
                .addComponent(quizQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(userQuizAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(quizResults, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addGroup(quizScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quizScreenToMenu)
                    .addComponent(toNextQuizQuestion))
                .addGap(19, 19, 19))
        );

        questionPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        questionPrompt.setText("Please enter a question.");

        answerPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        answerPrompt.setText("Please enter an answer.");

        tagsPrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tagsPrompt.setText("Please enter the tags for your new card, separated by commas.");

        nextEditScreen.setText("Save and Continue");
        nextEditScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextEditScreenActionPerformed(evt);
            }
        });

        editScreenToMenu.setText("Menu");
        editScreenToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editScreenToMenuActionPerformed(evt);
            }
        });

        editTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        editTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        editTitle.setText("Edit");

        javax.swing.GroupLayout editScreenLayout = new javax.swing.GroupLayout(editScreen);
        editScreen.setLayout(editScreenLayout);
        editScreenLayout.setHorizontalGroup(
            editScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userTagsEntry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userAnswerEntry, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userQuestionEntry)
                    .addGroup(editScreenLayout.createSequentialGroup()
                        .addGroup(editScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(questionPrompt)
                            .addComponent(answerPrompt)
                            .addComponent(tagsPrompt))
                        .addGap(0, 205, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editScreenLayout.createSequentialGroup()
                        .addComponent(editScreenToMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextEditScreen))
                    .addComponent(editError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(editTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        editScreenLayout.setVerticalGroup(
            editScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(questionPrompt)
                .addGap(18, 18, 18)
                .addComponent(userQuestionEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(answerPrompt)
                .addGap(26, 26, 26)
                .addComponent(userAnswerEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(tagsPrompt)
                .addGap(26, 26, 26)
                .addComponent(userTagsEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(editError)
                .addGap(7, 7, 7)
                .addGroup(editScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextEditScreen)
                    .addComponent(editScreenToMenu))
                .addContainerGap())
        );

        statsScreenToMenu.setText("Menu");
        statsScreenToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsScreenToMenuActionPerformed(evt);
            }
        });

        statsTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        statsTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statsTitle.setText("Stats");

        clearStatsButton.setForeground(new java.awt.Color(255, 0, 0));
        clearStatsButton.setText("CLEAR STATS");
        clearStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStatsButtonActionPerformed(evt);
            }
        });

        statsDisplay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        statsDisplayScroll.setViewportView(statsDisplay);

        javax.swing.GroupLayout statsScreenLayout = new javax.swing.GroupLayout(statsScreen);
        statsScreen.setLayout(statsScreenLayout);
        statsScreenLayout.setHorizontalGroup(
            statsScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsScreenLayout.createSequentialGroup()
                .addGroup(statsScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statsTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(statsScreenLayout.createSequentialGroup()
                        .addGroup(statsScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(statsScreenLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(statsScreenToMenu))
                            .addGroup(statsScreenLayout.createSequentialGroup()
                                .addGap(253, 253, 253)
                                .addComponent(clearStatsButton)))
                        .addGap(0, 252, Short.MAX_VALUE))
                    .addGroup(statsScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statsDisplayScroll)))
                .addContainerGap())
        );
        statsScreenLayout.setVerticalGroup(
            statsScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statsTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statsDisplayScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addComponent(clearStatsButton)
                .addGap(20, 20, 20)
                .addComponent(statsScreenToMenu)
                .addContainerGap())
        );

        deletePrompt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deletePrompt.setText("Enter the indexes of the questions you want to delete, separated by commas (or \"all\" to delete all).");

        toNextDelete.setText("Delete it");
        toNextDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toNextDeleteActionPerformed(evt);
            }
        });

        deleteScreenToMenu.setText("Menu");
        deleteScreenToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteScreenToMenuActionPerformed(evt);
            }
        });

        deleteTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        deleteTitle.setText("Delete");

        allPotentialDeletes.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        allPotentialDeletesScroll.setViewportView(allPotentialDeletes);

        userDeleteInput.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout deleteScreenLayout = new javax.swing.GroupLayout(deleteScreen);
        deleteScreen.setLayout(deleteScreenLayout);
        deleteScreenLayout.setHorizontalGroup(
            deleteScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteScreenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deleteScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deleteScreenLayout.createSequentialGroup()
                        .addComponent(deleteScreenToMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(toNextDelete))
                    .addGroup(deleteScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(allPotentialDeletesScroll)
                        .addComponent(userDeleteInput, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
                    .addComponent(deletePrompt))
                .addContainerGap())
        );
        deleteScreenLayout.setVerticalGroup(
            deleteScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deleteScreenLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(deleteTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deletePrompt, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allPotentialDeletesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(userDeleteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(deleteScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toNextDelete)
                    .addComponent(deleteScreenToMenu))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(saveLoadScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menuScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(quizTagsSelectScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(quizScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(statsScreen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(deleteScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(saveLoadScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menuScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(quizTagsSelectScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(quizScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(editScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(statsScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 34, Short.MAX_VALUE)
                    .addComponent(deleteScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 34, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        

    //END OF FORMATTING
    
    //everything with an "ActionPerformed" in the title is a fuunction that is called when 
   // a certain button is pressed (or anything else that submits user input).  The function
    //names are self-explanatory enough to figure out which button goes with which method
    
    private void saveLoadToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                               
        menuScreen.setVisible(true);
        saveLoadScreen.setVisible(false);
        String a1 = userSavePoint.getText();
	a1.replaceAll("/", "//");  //replaces / with // in the string, making it ok.
	savePoint = a1;
	
	String b1 = userLoadPoint.getText();
	b1.replaceAll("/", "//");  //does the same thing as the a1.replaceAll thing
	importPoint = b1;
        userSavePoint.setText("");
        userLoadPoint.setText("");
	importer();
    }                                              

    private void userSavePointActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void userQuizTagsSelectActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void quizButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        menuScreen.setVisible(false);
        quizTagsSelectScreen.setVisible(true);
    }                                          

    private void userQuizAnswerActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void quizTagsSelectToQuizActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        //starts a quiz
        count++;
        String tags = userQuizTagsSelect.getText().toLowerCase();  //.toLowerCase is so that it can 
	if(tags.equals(""))
        {
                quizTagsSelectPrompt.setText("You need to enter a tag.  Try again.");
            
        }
        else
        {
            quizTagsSelectScreen.setVisible(false);
            quizScreen.setVisible(true);
            quizTagsSelectPrompt.setText("Please enter the tags, separated by commas, that you would like to quiz yourself on.");
            if(tags.equals("all"))
            {
                cardsWithTags = cards;
            }
            else
            {
                StringTokenizer st = new StringTokenizer(tags, ",");
                while (st.hasMoreTokens())
                {

                    String temp = st.nextToken();

                    FRTag currentTag = new FRTag(temp);

                    cardsWithTags.addAll(currentTag.getCardsWithTag());
                }
            }
            if (cardsWithTags.size()==0)
            {
                quizQuestion.setText("<html>There are no cards with the specified tags.  Please return to menu and try again.");
                userQuizTagsSelect.setText("");
            }

            else
            {
                Collections.shuffle(cardsWithTags);

                boolean cardNotFound = true; //makes sure that the card is found, otheriwse the program breaks, a lot


                frf = cardsWithTags.get(count);

                frf.setTimesAsked(frf.getTimesAsked()+1);
                cardNotFound = false;  //tells the program that the card does indeed exist
                try 
                {
                    save();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
                String thisQuestion = frf.getQuestion();  //gets the question for frf
                quizQuestion.setText("<html>" +thisQuestion + "</html>");
                userQuizTagsSelect.setText("");
            }
        }
        
            
               
                
        
        
          
    }                                                    

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        menuScreen.setVisible(false);
        editScreen.setVisible(true);
    }                                          

    private void statsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        menuScreen.setVisible(false);
        statsScreen.setVisible(true);
        statsDisplay.setText(FRStats.getStat());
    }                                           

    private void quizTagsSelectToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        menuScreen.setVisible(true);
        quizTagsSelectScreen.setVisible(false);
        userQuizTagsSelect.setText("");
        count = -1; //resets quiz count
    }                                                    

    private void quizScreenToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        menuScreen.setVisible(true);
        quizScreen.setVisible(false);
        userQuizAnswer.setText("");
        count = -1; //resets quiz count
        quizResults.setText("");
    }                                                

    private void nextEditScreenActionPerformed(java.awt.event.ActionEvent evt) {                                               

        //submits edits, prompts user for new edits
        
        String question = userQuestionEntry.getText();       
        String answer = userAnswerEntry.getText();        
        String tags = userTagsEntry.getText();
        userQuestionEntry.setText("");
        userAnswerEntry.setText("");
        userTagsEntry.setText("");
        if((question.equals("")) || (answer.equals("")) || (tags.equals("")))
        {
                boolean checkQuestion = true;
                boolean checkAnswer = true;
                boolean checkTags = true;
                if(question.equals(""))
                {
                        checkQuestion = false;
                }
                if(answer.equals(""))
                {
                        checkAnswer = false;
                }
                if(tags.equals(""))
                {
                        checkTags = false;
                }
                editError.setText("Error: you failed to enter a required piece of informatiion.");
                
        }
        else
        {
            editError.setText("");
            try 
            {
                
                save();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
                
        FRFlashcard flash = new FRFlashcard(question, answer.toLowerCase(), tags.toLowerCase());
                cards.add(flash);
        }
    }                                              

    private void editScreenToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        menuScreen.setVisible(true);
        editScreen.setVisible(false);
        userAnswerEntry.setText("");
        userQuestionEntry.setText("");
        userTagsEntry.setText("");
    }                                                

    private void toNextQuizQuestionActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        //submits quiz answer, gives feedback, gives next question
        frf = cardsWithTags.get(count);
        if(userQuizAnswer.getText().toLowerCase().equals(frf.getAnswer()))
        {                       
            quizResults.setText("<html>Correct! Historically, you have gotten the previous question right " + (100-frf.getWrongPercentage()) + "% of the time!</html>");      
        }
        else if(!(userQuizAnswer.getText().toLowerCase().equals(frf.getAnswer())))
        {
            System.out.println("Faylyur!!!!!!");   //lol
            frf.setTimesWrong(frf.getTimesWrong()+1);  //adds 1 to the value for number of times question is asked
            try
            {
            save();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
            
            quizResults.setText("<html>Wrong! Historically, you have gotten the previous question wrong " + frf.getWrongPercentage() + "% of the time.</html>");
        }
        else
        {
            System.out.println("Truly, congratulations are in order. I have never seen someone as stupid as you. You mananged to break a logic loop that is boolean! you idiot!");
            
        }
        if (count >= cardsWithTags.size() -1) 
        {
            count = 0;
        }
        else
        {
            count++;
        }
        
        
        
        
        boolean cardNotFound = true; //makes sure that the card is found, otheriwse the program breaks, a lot
        
        frf = cardsWithTags.get(count);
        
        frf.setTimesAsked(frf.getTimesAsked()+1);
        cardNotFound = false;  //tells the program that the card does indeed exist
        try 
        {
            save();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        String thisQuestion = frf.getQuestion();  //gets the question for frf
        quizQuestion.setText(thisQuestion);
        
            
               
                
        
        userQuizAnswer.setText("");
        
        
    }                                                  

    private void broweSaveActionPerformed(java.awt.event.ActionEvent evt) {                                          
        fileChooserFrame.setVisible(true);
        fileChooserFrame.setSize(760, 474);
        saveFileChooser.setVisible(true);
        loadFileChooser.setVisible(false);
        
    }                                         

    private void browseLoadActionPerformed(java.awt.event.ActionEvent evt) {                                           
        fileChooserFrame.setVisible(true);
        fileChooserFrame.setSize(760, 474);
        loadFileChooser.setVisible(true);
        saveFileChooser.setVisible(false);
        
        
    }                                          

    private void saveFileChooserActionPerformed(java.awt.event.ActionEvent evt) {                                                
        //puts file chosen by filechooser to save text box
        
        String saveFile = saveFileChooser.getSelectedFile().toString();

        userSavePoint.setText(saveFile);


        
        
        fileChooserFrame.setVisible(false);
        saveFileChooser.setVisible(false);
        loadFileChooser.setVisible(false);
    }                                               

    private void loadFileChooserActionPerformed(java.awt.event.ActionEvent evt) {                                                
        //puts file chosen by filechooser to load text box
        String loadFile = loadFileChooser.getSelectedFile().toString();

        userLoadPoint.setText(loadFile);

        fileChooserFrame.setVisible(false);
        saveFileChooser.setVisible(false);
        loadFileChooser.setVisible(false);
    }                                               

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
       //creates window of potential deletes
        menuScreen.setVisible(false);
        deleteScreen.setVisible(true);
        int cardCount = 0;
        String outputString = "<html>";
        for (FRFlashcard flashcard : cards)
        {
            outputString += cardCount + " " + flashcard.getQuestion() + "<br>";
            cardCount++;
        }
        outputString += "</html>";
        allPotentialDeletes.setText(outputString);
    }                                            

    private void deleteScreenToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        deleteScreen.setVisible(false);
        menuScreen.setVisible(true);
        deletePrompt.setText("Enter the indexes of the questions you want to delete, separated by commas (or \"all\" to delete all).");
        userDeleteInput.setText("");
        
    }                                                  

    private void toNextDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //deletes selected questions
        ArrayList<JCheckBox> allCards = new ArrayList<JCheckBox>();
        
        String deleteInput = userDeleteInput.getText();
        ArrayList<FRFlashcard> toBeRemoved = new ArrayList<FRFlashcard>();
        StringTokenizer st = new StringTokenizer(deleteInput, ", ");
        boolean cont = true;
        while (st.hasMoreTokens())
        {
            String temp = st.nextToken();
            if (temp.equals("all"))
            {
                toBeRemoved.addAll(cards);
            }
            else
            {
            try
            {
            int selectedIndex = Integer.parseInt(temp);
            toBeRemoved.add(cards.get(selectedIndex));
            }
            catch (NumberFormatException e)
            {
                deletePrompt.setText("Use the proper format and try again");
                cont = false;
            }
            catch (IndexOutOfBoundsException e)
            {
                deletePrompt.setText("No cards could be found to delete.");
            }
            }
        }
        //recreates the window of potential deletes
        
        if (cont)
        {
            if (toBeRemoved.isEmpty()) 
        {
            deletePrompt.setText("No cards could be found to delete.");
        }
        else
        {
            deletePrompt.setText("");           
            cards.removeAll(toBeRemoved);
            cardsWithTags.removeAll(toBeRemoved);
            deletePrompt.setText("Enter the indexes of the questions you want to delete, separated by commas (or \"all\" to delete all).");
            int cardCount = 0;
            String outputString = "<html>";
            for (FRFlashcard flashcard : cards)
            {
                outputString += cardCount + " " + flashcard.getQuestion() + "<br>";
                cardCount++;
            }
            outputString += "</html>";
            allPotentialDeletes.setText(outputString);
        }
        
        try
        {
            save();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        
        }
        
        
        
    }                                            

    private void clearStatsButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        for (FRFlashcard fc : cards)
        {
            fc.setTimesAsked(0);
            fc.setTimesWrong(0);
            statsScreen.setVisible(false);
            menuScreen.setVisible(true);
        }
        try
        {
            save();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }                                                

    private void statsScreenToMenuActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        menuScreen.setVisible(true);
        statsScreen.setVisible(false);
        statsDisplay.setText("");
    }                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRMain().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JLabel allPotentialDeletes;
    private javax.swing.JScrollPane allPotentialDeletesScroll;
    private javax.swing.JLabel answerPrompt;
    private javax.swing.JButton broweSave;
    private javax.swing.JButton browseLoad;
    private javax.swing.JButton clearStatsButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel deletePrompt;
    private javax.swing.JPanel deleteScreen;
    private javax.swing.JButton deleteScreenToMenu;
    private javax.swing.JLabel deleteTitle;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel editError;
    private javax.swing.JPanel editScreen;
    private javax.swing.JButton editScreenToMenu;
    private javax.swing.JLabel editTitle;
    private javax.swing.JFrame fileChooserFrame;
    private javax.swing.JFileChooser loadFileChooser;
    private javax.swing.JLabel loadPrompt;
    private javax.swing.JPanel menuScreen;
    private javax.swing.JLabel menuTitle;
    private javax.swing.JButton nextEditScreen;
    private javax.swing.JLabel noteKeywordAll;
    private javax.swing.JLabel questionPrompt;
    private javax.swing.JButton quizButton;
    private javax.swing.JLabel quizQuestion;
    private javax.swing.JLabel quizResults;
    private javax.swing.JPanel quizScreen;
    private javax.swing.JButton quizScreenToMenu;
    private javax.swing.JLabel quizTagsSelectPrompt;
    private javax.swing.JPanel quizTagsSelectScreen;
    private javax.swing.JButton quizTagsSelectToMenu;
    private javax.swing.JButton quizTagsSelectToQuiz;
    private javax.swing.JLabel quizTitle;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JPanel saveLoadScreen;
    private javax.swing.JLabel saveLoadTitle;
    private javax.swing.JButton saveLoadToMenu;
    private javax.swing.JLabel savePrompt;
    private javax.swing.JButton statsButton;
    private javax.swing.JLabel statsDisplay;
    private javax.swing.JScrollPane statsDisplayScroll;
    private javax.swing.JPanel statsScreen;
    private javax.swing.JButton statsScreenToMenu;
    private javax.swing.JLabel statsTitle;
    private javax.swing.JLabel tagsPrompt;
    private javax.swing.JLabel tagsSelectTitle;
    private javax.swing.JButton toNextDelete;
    private javax.swing.JButton toNextQuizQuestion;
    private javax.swing.JTextField userAnswerEntry;
    private javax.swing.JTextField userDeleteInput;
    private javax.swing.JTextField userLoadPoint;
    private javax.swing.JTextField userQuestionEntry;
    private javax.swing.JTextField userQuizAnswer;
    private javax.swing.JTextField userQuizTagsSelect;
    private javax.swing.JTextField userSavePoint;
    private javax.swing.JTextField userTagsEntry;
    // End of variables declaration                   
}
